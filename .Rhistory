load("~/ICPI/Innovation/Shiny gaps/.RData")
SA_sitexIMtest <- sitexIM %>%
filter(grepl("ohannesburg",PSNU)) %>%
filter(indicator=="TX_CURR")
library(dplyr)
SA_sitexIMtest <- sitexIM %>%
filter(grepl("ohannesburg",PSNU)) %>%
filter(indicator=="TX_CURR")
View(SA_sitexIMtest)
setwd("C:/Users/wvp3/Desktop/Large data files")
write.csv(SA_sitexIMtest,file="SA_sitexIMtest.csv")
SA_sitexIMtest <- sitexIM %>%
filter(grepl("ohannesburg",PSNU)) %>%
filter(indicator=="TX_CURR" | indicator=="HRH_CURR")
write.csv(SA_sitexIMtest,file="SA_sitexIMtest.csv")
SA_sitexIMtest <- sitexIM %>%
filter(indicator=="TX_CURR" | indicator=="HRH_CURR") %>%
filter(standardizedDisaggregate=="Total Numerator")
write.csv(SA_sitexIMtest,file="SA_sitexIMtest.csv")
library(readr)
psnuxIM <- read_delim("C:/Users/wvp3/Downloads/PSNU_IM_20170719_Append_NDo_H_Targets_Results_Quarters_V2-_SA_7-26-17 (1).tsv",
"\t", escape_double = FALSE, col_types = cols(fiscalyear = col_character(),
mechanismid = col_character()), trim_ws = TRUE)
str(psnuxIM)
head(psnuxIM,10)
nrow(psnuxIM)
table(psnuxIM$pepfar_period)
psnuxIM_long <-   melt(psnuxIM) %>%
filter(!is.na(value))
library("dplyr", lib.loc="C:/Users/wvp3/Desktop/R Packages")
psnuxIM_long <-   melt(psnuxIM) %>%
filter(!is.na(value))
library(reshape2)
library(tidyr)
psnuxIM_long <-   melt(psnuxIM) %>%
filter(!is.na(value))
View(psnuxIM_long)
View(psnuxIM_long)
table(psnuxIM_long$variable)
psnuxIM_targets <- filter(psnuxIM_long, grepl("TARGET",pepfar_period)) %>%
mutate(qtarget = ifelse((indicator %in% c("TX_NEW", "HTS_TST", "HTS_TST_POS", "VMMC_CIRC", "PMTCT_STAT")),
(value/4),
value))
psnuxIM_results <- filter(psnuxIM_long, !grepl("TARGET",pepfar_period), !grepl("APR",pepfar_period))
psnu_targets <- psnuxIM_targets %>%
group_by(snu1, psnu, snuprioritization, fiscalyear, indicator, disaggregate,
categoryoptioncomboname,numeratordenom,pepfar_ndoh) %>%
summarise(qtarget=sum(qtarget)) %>%
mutate(resulttarget="TARGET")
psnu_results <- psnuxIM_results %>%
group_by(snu1, psnu, snuprioritization, fiscalyear, pepfar_period, indicator, disaggregate,
categoryoptioncomboname,numeratordenom,pepfar_ndoh) %>%
summarise(result=sum(value)) %>%
mutate(resulttarget="RESULT")
psnu_ach <- left_join(psnu_results,psnu_targets, by=c("snu1","psnu","fiscalyear","indicator","disaggregate","categoryoptioncomboname","numeratordenom"))
psnu_ach <- mutate(psnu_ach,achievement = (result/qtarget)*100)
psnu_ach$result <- as.numeric(psnu_ach$result)
psnu_ach$qtarget <- as.numeric(psnu_ach$qtarget)
psnu_ach$achievement <- as.numeric(psnu_ach$achievement)
write.table(psnu_ach, file='pepfar_ndoh_achieve.tsv', quote=FALSE, sep='\t', col.names = NA)
table(psnuxIM_results$fiscalyear)
write.table(psnu_ach, file='pepfar_ndoh_achieve.txt', quote=FALSE, sep='\t', col.names = NA)
View(psnuxIM_long)
table(psnuxIM_long$variable)
table(psnuxIM_long$variable,psnuxIM_long$pepfar_period)
psnuxIM_long <-   psnuxIM
ake calculations/add or change columns
# %in% c() is inlist in Stata (usually need c when refering to a list) "the values of the variable are in this list"
psnuxIM_targets <- filter(psnuxIM_long, grepl("TARGET",pepfar_period)) %>%
mutate(qtarget = ifelse((indicator %in% c("TX_NEW", "HTS_TST", "HTS_TST_POS", "VMMC_CIRC", "PMTCT_STAT")),
(value/4),
value))
# omit TX_CURR target from quarterly division - it's a cumulative snapshot indicator
# mutate(fiscalyear=as.character(str_sub(variable,3,6)))
#filter out targets and APR results - left with only quarterly results
psnuxIM_results <- filter(psnuxIM_long, !grepl("TARGET",pepfar_period), !grepl("APR",pepfar_period))
#mutate(fiscalyear=as.character(str_sub(variable,3,6))) %>%
#dplyr::rename(fiscalperiod=variable)
# collapse across mechanisms and DSD + TA  (but not numer / denom)
psnu_targets <- psnuxIM_targets %>%
group_by(snu1, psnu, snuprioritization, fiscalyear, indicator, disaggregate,
categoryoptioncomboname,numeratordenom,pepfar_ndoh) %>%
summarise(qtarget=sum(qtarget)) %>%
mutate(resulttarget="TARGET")
psnu_results <- psnuxIM_results %>%
group_by(snu1, psnu, snuprioritization, fiscalyear, pepfar_period, indicator, disaggregate,
categoryoptioncomboname,numeratordenom,pepfar_ndoh) %>%
summarise(result=sum(value)) %>%
mutate(resulttarget="RESULT")
# datasets should join every time there's a match on the b= list
psnu_ach <- left_join(psnu_results,psnu_targets, by=c("snu1","psnu","fiscalyear","indicator","disaggregate","categoryoptioncomboname","numeratordenom"))
psnu_ach <- mutate(psnu_ach,achievement = (result/qtarget)*100)
# open and look at pivots to assess merge success
# covert(coerce) to numeric (as .character/.date - w options)
psnu_ach$result <- as.numeric(psnu_ach$result)
psnu_ach$qtarget <- as.numeric(psnu_ach$qtarget)
psnu_ach$achievement <- as.numeric(psnu_ach$achievement)
write.table(psnu_ach, file='pepfar_ndoh_achieve.txt', quote=FALSE, sep='\t', col.names = NA)
getwd
.libPaths()
shiny::runApp('~/ICPI/Innovation/Shiny site aggregator')
load("~/ICPI/Innovation/Shiny site aggregator/.RData")
runApp('~/ICPI/Innovation/Shiny site aggregator')
lapply
library(plyr)
getwd()
test = 1+1
test <- 2+2
list <- c(1, 2, 3, 4)
list <- c("a", "b",
"c")
list <- c("abbbbbbbbbbbbbbbbbbbbbbbb",
"bcccccccccccccccccccccccccccccccccc",
"cdddddddddddddddddddddddddddddddddddddddd")
df <- [3, 4, 5]
df <- as.matrix[3, 4, 5]
df <- matrix(c("1, 2, 3, 4, 5, 6"), nrow=2)
View(df)
df <- matrix(c("1, 2, 3, 4, 5, 6"), nrow=2, ncol=3)
View(df)
df <- matrix(c(1, 2, 3, 4, 5, 6), nrow=2, ncol=3)
View(df)
names(df)
colnames(df)
colnames(df) <- c("a","b","c")
names(df) <- c("a","b","c")
names(df) <- c("id","b","c")
names(df) <- c("id","b","c")
colnames(df) <- c("id","b","c")
names(df)
df <- as.data.frame(df)
names(df) <- c("id","b","c")
getwd()
library(tidyverse)
library(shiny)
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="C:/Users/wvp3/Desktop/R Packages")
library(DT)
library(data.table)
library(readr)
getwd()
fread("C:/Users/wvp3/Desktop/Large data files/ICPI_MER_Structured_Dataset_PSNU_IM_20180323_v2_1_Lesotho.txt")
psnuxim <- fread("C:/Users/wvp3/Desktop/Large data files/ICPI_MER_Structured_Dataset_PSNU_IM_20180323_v2_1_Lesotho.txt")
View(psnuxim)
psnuxim2 <- select(psnuim, FY2017Q4)
psnuxim2 <- select(psnuxim, FY2017Q4)
psnuxim2 <- select(psnuxim, FY2017Q1,FY2017Q4)
psnuxim2 <- select(psnuxim, FY2017Q1-FY2017Q4)
psnuxim2 <- select(psnuxim, FY2017Q[1-4])
psnuxim2 <- select(psnuxim, ends_with("Q4"))
View(psnuxim2)
psnuxim2 <- select(psnuxim, -ends_with("Q4"))
View(psnuxim2)
psnuxim3 <- filter(psnuxim, indicator=="HTS_TST")
View(psnuxim3)
psnuxim3 <- filter(psnuxim, !is.na(FY2018Q1))
View(psnuxim)
psnuxim3 <- filter(psnuxim, indicator=="OVC_SERV")
View(psnuxim3)
OVC_SERV <- filter(psnuxim, indicator=="OVC_SERV")
TREATMENT <- filter(psnuxim, indicator %like%  = "TX"
TREATMENT <- filter(psnuxim, indicator%like%"TX"
TREATMENT <- filter(psnuxim, indicator%like%"TX")
TREATMENT <- filter(psnuxim, indicator%like%"TX")
View(TREATMENT)
TREATMENT <- filter(psnuxim, indicator %in% c("TX_NEW", "HTS_TST_POS"))
grepl("TX_", indicator)
grepl("TX_", psnuxim$indicator)
TREATMENT <- filter(psnuxim, indicator %like% "TX")
tx <- filter(psnuxim, grepl("TX_", psnuxim$indicator))
cumulative <- dplyr::mutate(tx, cumulativeFY2017Q3 = FY2017Q1 + FY2017Q2 + FY2017Q3)
View(cumulative)
q3totals <- dplyr::summarise(FY2017Q3)
q3totals <- dplyr::summarise(tx, FY2017Q3)
q3totals <- dplyr::summarise(tx, total=FY2017Q3)
q3totals <- dplyr::summarise(tx, FY2017Q3, na.rm=TRUE)
tx <- psnuxim %>%
filter(grepl("TX_", indicator)) %>%
mutate(cumulativeFY2017Q3 = FY2017Q1 + FY2017Q2 + FY2017Q3)
1+1
library(tidyverse)
load("C:/Users/wvp3/Desktop/Shiny apps (upload)/Shiny site aggregator 4-19-2018/.RData")
load("C:/Users/wvp3/Desktop/Shiny apps (upload)/Shiny radius tool/.RData")
devtools::install_github('hadley/ggplot2')
devtools::install_github('hadley/ggplot2'), force=TRUE
devtools::install_github('hadley/ggplot2', force=TRUE)
library(ggplot2)
sitexIM <- fread("C:/Users/wvp3/Desktop/Large data files/ICPI_MER_Structured_Dataset_SITE_IM_FY17-18_SouthAfrica_20180515_v1_1.txt")
library(readr)
library(leaflet)
library(rgdal)
library(crosstalk)
library(DT)
library(data.table)
library(stringr)
library(dplyr)
library(summarywidget)
library(reshape2)
library(d3scatter)
sitexIM <- fread("C:/Users/wvp3/Desktop/Large data files/ICPI_MER_Structured_Dataset_SITE_IM_FY17-18_SouthAfrica_20180515_v1_1.txt")
kpfy2018q2 <- sitexIM %>%
filter(indicator %in% c("HTS_TST","HTS_TST_POS","TX_NEW","KP_PREV"))
View(kpfy2018q2)
write.csv(kpfy2018q2,file="kpcheck.csv",row.names=FALSE)
kpfy2018q2 <- sitexIM %>%
filter(indicator %in% c("HTS_TST","HTS_TST_POS"))
write.csv(kpfy2018q2,file="kpcheck.csv",row.names=FALSE)
kpfy2018q2 <- sitexIM %>%
gather("fiscalperiod","value",starts_with("FY_"))
library(tidyr)
kpfy2018q2 <- sitexIM %>%
gather("fiscalperiod","value",starts_with("FY_"))
kpfy2018q2 <- sitexIM %>%
gather("fiscalperiod","value",starts_with("FY_")) %>%
filter(modality %in% c("Index","IndexMod","(blank)"))
kpfy2018q2 <- sitexIM %>%
gather("fiscalperiod","value",starts_with("FY_")) %>%
filter(modality %in% c("Index","IndexMod","(blank)")) %>%
spread("modality","value")
kpfy2018q2 <- sitexIM %>%
gather("fiscalperiod","value",starts_with("FY_")) %>%
filter(modality %in% c("Index","IndexMod","(blank)")) %>%
spread(modality,value)
kpfy2018q2 <- sitexIM %>%
gather("fiscalperiod","value",starts_with("FY_")) %>%
filter(modality %in% c("Index","IndexMod","(blank)")) %>%
dcast(... ~ modality, value.vars="value")
View(kpfy2018q2)
kpfy2018q2 <- sitexIM %>%
gather("fiscalperiod","value",starts_with("FY")) %>%
filter(modality %in% c("Index","IndexMod","(blank)")) %>%
dcast(... ~ modality, value.vars="value")
kpfy2018q2 <- sitexIM %>%
gather("fiscalperiod","value",starts_with("FY")) %>%
filter(modality %in% c("Index","IndexMod","(blank)"))
kpfy2018q2 <- sitexIM %>%
filter(indicator %in% c("HTS_TST","HTS_TST_POS")) %>%
filter(modality %in% c("Index","IndexMod","(blank)")) %>%
gather("fiscalperiod","value",starts_with("FY")) %>%
dcast(... ~ modality, value.vars="value")
kpfy2018q2 <- sitexIM %>%
filter(indicator %in% c("HTS_TST","HTS_TST_POS")) %>%
filter(modality %in% c("Index","IndexMod","(blank)"))
remove(kpfy2018q2)
kpfy2018q2 <- sitexIM %>%
filter(indicator %in% c("HTS_TST","HTS_TST_POS"))
load("C:/Users/wvp3/Desktop/Large data files/.RData")
library(devtools)
library(fs)
install.packages("fs")
library(fs)
setwd("C:/Users/wvp3/Desktop/Shiny apps (upload)/Shiny site aggregator 7-31-2018")
load("C:/Users/wvp3/Desktop/Shiny apps (upload)/Shiny site aggregator 7-31-2018/.RData")
shiny::runApp()
runApp()
save.image()
load("C:/Users/wvp3/Desktop/Shiny apps (upload)/Shiny site aggregator 5-25-2018/.RData")
load("C:/Users/wvp3/Desktop/Shiny apps (upload)/Shiny site aggregator 7-31-2018/.RData")
PSNU <- readOGR("South_Africa_PSNU.shp",
layer = "South_Africa_PSNU", GDAL1_integer64_policy = TRUE)
PSNU <- readOGR("~/ICPI/Innovation/Shiny site aggregator/South_Africa_PSNU.shp",
layer = "South_Africa_PSNU", GDAL1_integer64_policy = TRUE)
setwd("//cdc.gov/private/M327/wvp3/ICPI/Innovation/Shiny site aggregator")
library(sf)
library(sp)
PSNU <- readOGR("South_Africa_PSNU.shp",
layer = "South_Africa_PSNU", GDAL1_integer64_policy = TRUE)
#
setwd("C:/Users/wvp3/Desktop/Shiny apps (upload)/Shiny site aggregator 7-31-2018")
save.image()
runApp()
runApp()
str(sitedata)
runApp()
sitexIM <- ICPIutilities::read_msd("C:/Users/wvp3/Desktop/Large data files/MER_Structured_Dataset_Site_IM_FY17-18_SouthAfrica_20180622_v2_1.txt",to_lower=FALSE)
site_tots <- sitexIM %>%
filter(indicator %in% c("TX_CURR","TX_NEW","HTS_TST","HTS_TST_POS","TX_RET") &
(PSNU!="_Military South Africa") &
(standardizedDisaggregate=="Total Numerator" | standardizedDisaggregate=="Total Denominator") ) %>%
site_tots <- sitexIM %>%
filter(indicator %in% c("TX_CURR","TX_NEW","HTS_TST","HTS_TST_POS","TX_RET") &
(PSNU!="_Military South Africa") &
(standardizedDisaggregate=="Total Numerator" | standardizedDisaggregate=="Total Denominator") )
remove(sitexIM)
write.csv(site_tots,file="checksitetots.csv",row.names=FALSE)
runApp()
runApp()
site_tots <- sitexIM %>%
filter(indicator %in% c("TX_CURR","TX_NEW","HTS_TST","HTS_TST_POS","TX_RET") &
(PSNU!="_Military South Africa") &
(standardizedDisaggregate=="Total Numerator" | standardizedDisaggregate=="Total Denominator") ) %>%
# dplyr::select minimum set - aggregates DSD+TA; Num & Den are implied from disaggregation
select(PSNU, PSNUuid, Community, CommunityUID, Facility, FacilityUID,
indicator, standardizedDisaggregate, matches) %>%
# for this visual, we will keep numerator and denominator separate (because TX_RET is in here)
mutate(numeratorDenominator = ifelse(grepl("Numerator",standardizedDisaggregate), "N",
ifelse(grepl("Denominator",standardizedDisaggregate), "D", ""))) %>%
select(-standardizedDisaggregate) %>%
group_by(PSNU, PSNUuid, Community, CommunityUID, Facility, FacilityUID,
indicator, numeratorDenominator) %>%
summarise_all(funs(sum), na.rm=TRUE) %>%
ungroup()
site_tots <- site_tots %>%
# dplyr::select minimum set - aggregates DSD+TA; Num & Den are implied from disaggregation
select(PSNU, PSNUuid, Community, CommunityUID, Facility, FacilityUID,
indicator, standardizedDisaggregate, matches) %>%
# for this visual, we will keep numerator and denominator separate (because TX_RET is in here)
mutate(numeratorDenominator = ifelse(grepl("Numerator",standardizedDisaggregate), "N",
ifelse(grepl("Denominator",standardizedDisaggregate), "D", ""))) %>%
select(-standardizedDisaggregate) %>%
group_by(PSNU, PSNUuid, Community, CommunityUID, Facility, FacilityUID,
indicator, numeratorDenominator) %>%
summarise_all(funs(sum), na.rm=TRUE) %>%
ungroup()
write.csv(site_tots,file="checksitetots.csv",row.names=FALSE)
site_wide <- site_tots %>%
melt() %>%
dcast(... ~ indicator + numeratorDenominator) %>%
mutate(linkage = TX_NEW_N / HTS_TST_POS_N) %>%
mutate(linkcap = ifelse((linkage>3 & HTS_TST_POS_N!=0),3,linkage))
# merge wide MER dataset together with the site coordinate data
sitedata <- left_join(site_wide,sa,by="FacilityUID")
# parse DATIM site names (text) to try to assign site type for visualizations
sitedata <- sitedata %>%
mutate(sitetype = case_when(grepl("Clinic",Facility,ignore.case=TRUE) ~ "Clinic",
grepl("Hospital",Facility,ignore.case=TRUE) ~ "Hospital",
grepl("CHC",Facility,ignore.case=TRUE) ~ "Health Centre",
grepl("CDC",Facility,ignore.case=TRUE) ~ "Health Centre",
grepl("dispensary",Facility,ignore.case=TRUE) ~ "Dispensary/pharmacy",
grepl("pharmacy",Facility,ignore.case=TRUE) ~ "Dispensary/pharmacy",
grepl("Maternity",Facility,ignore.case=TRUE) ~ "Maternity clinic/hospital",
grepl("Mobile",Facility,ignore.case=TRUE) ~ "Mobile" )
) %>%
mutate(sitetype=ifelse(is.na(sitetype),"Other",sitetype))
# for the app, further streamline .rdata file by removing unnecessary / unused columns and dfs
# remove facility UID only for the aggregator tool NOT for the radius tool
sitedata <- sitedata %>% select(-PSNUuid,-CommunityUID,-FacilityUID,-name, -geometry, -level)
# sitedata <- sitedata %>% mutate(linkage = TX_NEW_N / HTS_TST_POS_N) %>%
#                         mutate(linkcap = ifelse((linkage>3 & HTS_TST_POS_N!=0),3,linkage))
write.csv(sitedata,file="checksitedata.csv",row.names=FALSE)
getwd()
remove(site_wide)
remove(site_tots)
remove(matches)
save.image()
runApp()
sitedata <- left_join(sitedata,tenten,by="Facility")
runApp()
save.image()
getwd()
runApp()
save.image()
## This app is meant to help us understand how clusters of sites perform as a group.
#
load()
## This app is meant to help us understand how clusters of sites perform as a group.
#
load(.RData)
getwd()
## This app is meant to help us understand how clusters of sites perform as a group.
#
load(.RData)
## This app is meant to help us understand how clusters of sites perform as a group.
#
load(".RData")
runApp()
runApp()
ICPIutilities::add_color(palette="bohemia")
ICPIutilities::add_color(palette="bohemia")
ICPIutilities::add_color(palette="woods")
runApp()
runApp()
runApp()
